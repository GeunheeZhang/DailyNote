지금 배워 두면 딱 좋은 '프로그래밍 언어 16선'
                 Techworld staff | Techworld

프로그래밍 초보자라면 스크래치(Scratch)나 HTML과 같은 단순한 언어로 시작하는 것이 좋다. 일단 기본 지식을 습득한 다음 배워볼 만한 다양한 언어가 있다.

자바스크립트, PHP, C#과 같은 프로그래밍 언어가 인기 있는 데는 그럴 만한 이유가 있다. 이들은 각 분에서 최고로 평가받고 있으며 시장에서 꾸준히 수요가 있다. 여기 개발자에게 가치를 제공할 수 있지만 덜 알려진 유용한 프로그래밍 언어를 소개한다. 이들은 앞으로 몇 년 동안 기업 내에서 큰 역할을 할 것으로 기대된다. 

1. F#
이 오픈소스 기능 언어는 광범위한 애플리케이션 사용과 적극적인 커뮤니티 덕분에 소프트웨어 개발자들 사이에서 인기가 있다. F#은 2005년에 시작되었으며 처음에는 윈도우에서만 마이크로소프트 리서치 프로젝트로 제공되었다. 그러나 이제는 여러 플랫폼에서 사용하거나 자바스크립트, GPU 코드, 게임, 빅데이터 등을 생성할 수 있다.

스택오버플로우(Stackoverflow)의 어떤 프로그래밍 언어가 고임금을 받는지 설문 조사에서 F# 사용자는 연 평균 약 7만 4,000달러의 급여를 받아 세계에서 가장 고임금의 개발자로 파악됐다.

2. OCaml
OCaml은 메타언어(metalanguage) 계열의 하나며 1996년에 처음 등장했다. OCaml은 F#과 스칼라를 비롯한 여러 프로그래밍 언어의 개발에 영향을 주었으며 현재 많은 개발자에게 인기 있는 언어로 남아 있다.

표현력과 안전성에 중점을 두고 설계된 OCaml은 실수를 포착하는 데 도움이 되는 고급 유형 시스템을 갖추고 있다. 속도가 핵심이지만 단일 오류로 인해 잠재적으로 수백만 파운드의 손실이 발생할 수 있는 환경에서 작업하는 사용자가 선호하는 것으로 알려졌다.

3. 아파치 그루비
아파치 그루비(Apache Groovy)는 객체지향의 민첩하고 역동적인 언어로 자바의 대체제라기보다는 자바의 동반자로 설계됐다. 기존의 모든 자바 객체 및 라이브러리와 완벽하게 통합되며 파이썬, 러스트, 스몰토크(Smalltalk), 페로(Pero)와 유사한 많은 기능을 제공한다.

그루비는 유연성이 뛰어나고 애플리케이션에 특수 기능을 추가해 자바보다 한층 더 개선됐다. 자바와 유사한 문법은 이미 자바에 익숙한 사용자에게 자연스럽고 간결하며 간략한 직접 작성을 통해 개발자가 프로젝트를 더 쉽고 빠르게 작성할 수 있음을 의미한다.

4. 발레리나
발레리나(Ballerina)는 오픈소스 기술 제공 업체인 WSO2가 개발해 2017년에 발표한 것으로 컴파일된 유형 안전성, 동시 프로그래밍 언어다. 클라우드 우선으로 설계된 이 회사의 전문성은 통합 및 병렬 처리로 분산 트랜잭션, 안정적인 메시징, 스트림 처리, 워크플로우로 마이크로 서비스를 구현하는 데 도움이 된다. 발레리나는 최신 웹 프로토콜 및 데이터 형식을 기본적으로 지원한다.

개발자 경험은 흐름을 유지하도록 설계되었으며 편집, 구축, 디버그 주기가 신속하고 팀의 라이프 사이클 툴 체인에 통합되어 있다. 

5. 자바스크립트
개발자가 될 계획이라면 자바스크립트로 코딩하는 방법을 알아야 한다. 2017년의 스택오버플로우의 연례 설문 조사에서 62.5%의 응답자가 이 언어를 사용해 가장 인기 있는 선택으로 알려졌다. 또한 2017년 말 깃허브에서 요청 건수가 가장 많은 언어도 자바스크립트였다.

자바스크립트 기술력을 갖추지 않았다면 다른 언어로도 보완하는 것이 현명하다. 조직에 따라 다르겠지만 하나의 언어만 필요로 하는 경우는 거의 없다. 

6. 파이썬
머신러닝 붐은 빅데이터 분석을 기반으로 하는 많은 개발 애플리케이션에서 인기 있는 언어인 파이썬의 등장을 촉발하고 있다. 파이썬은 웹 애플리케이션, 데스크톱 애플리케이션, 네트워크 서버에서도 사용되는 적응력이 뛰어난 범용 언어다. 다른 이점이라면 코드가 깔끔하고 읽기 쉬우며 구글에서 많이 사용한다는 것이다. 이 언어를 배우는 데 구글에서든 다른 곳에서든 많은 도움을 얻을 수 있다.

7. 줄리아
2009년 제프 베잔슨, 스테판 카핀스키, 바이럴 B. 샤, 알란 에델만이 설계한 줄리아는 빠른 수치 함수 및 분석에 이상적인 고급 동적 프로그래밍 언어다. 줄리아는 파이썬의 속도 문제를 해결하는 수단으로 설명될 수 있다. 공동창시자들은 자신들이 파이썬에서 좋아하는 특징인 간단한 구문과 데이터 분리 및 정리 기능, 그리고 변경된 코드를 사용해 즉시 컴파일할 수 있는 기능을 토대로 개발했다. 파이썬을 다룰 줄 안다면 줄리아를 배우라. 

8. 스칼라
자바를 사용하며 좌절해 본 적이 있다면 스칼라가 해답이 될 수 있다. 2004년 마틴 오더스키가 디자인한 스칼라는 '객체지향 기능을 충족시키는' 범용 프로그래밍 언어다. 스칼라는 JVM 플랫폼에서 실행되므로 자바 클래스 전체와 호환된다. 자바와 비교할 때 스칼라가 더 깔끔하고 단순하며 유연한 구문을 제공한다.

9. 타입스크립트
타입스크립트(TypeScript)는 연초에 인기를 얻었으며 2017년에 계속해서 강세를 보였다. 이는 기술 출판사인 레드몽크의 순위에 반영되었으며, 1분기에 깃허브 순위에서 17점, 얼랭(Erlang)과 러스트가 중복되어 나타났다.

'자바스크립트 댓 스케일(JavaScript that scales)'로 명명된 타입스크립트는 모든 변수에 유형을 추가하여 보안 느낌을 더한다. 가장 큰 장점 중 하나는 개발자가 타입스크립트로 작성된 웹 애플리케이션을 만들기 위한 프레임워크인 앵귤러를 활용할 수 있다는 것이다. 앵귤러를 사용하기 위해 반드시 타입스크립트를 사용할 필요는 없다.

10. R
R은 통계 컴퓨팅을 위한 오픈소스 소프트웨어 환경을 제공한다. 1993년에 처음 등장한 R은 데이터 마이닝, 통계학자 및 학자와 같은 데이터 기반 사고 및 직종으로 인해 많은 인기를 얻었다. 하둡과 같은 대기업과 경쟁할 수는 없지만 데이터의 하위 집합을 분석하기 위한 간단하고 효과적인 리소스를 제공한다.

11. 코틀린
신속하게 컴파일하고 자바와 함께 실행하는 것을 의미하는 코틀린은 자바 가상머신(JVM)에서 실행되는 정적 유형의 프로그래밍 언어이며 자바스크립트 소스 코드로 컴파일될 수 있다. 러시아 소프트웨어 개발 회사인 제트브레인(JetBrains)이 만든 코틀린은 핀터레스트, 에버노트, 우버, 코세라(Coursera)에서 사용된다.

12. 스위프트
2014년 애플의 WWDC 컨퍼런스에서 공개된 스위프트는 OSX 및 iOS 개발을 위한 객체지향-C 언어를 대체할 목적으로 iOS 기기에서 쉽게 개발할 수 있도록 만들었다고 깃허브의 조 내쉬는 말했다. 애플은 2015년 12월 아파치 라이선스에 따라 오픈소스 언어를 만들어 개발자 커뮤니티에서 큰 인기를 얻고 있다.

레드몽크 애널리스트인 스테판 오그래디에 따르면 루비와 파이썬 같은 최신 언어와 유사한 점이 있는 스위프트는 출시 이후 ‘눈부시게’ 성장하고 있다. 모든 애플의 교육 컨텐츠와 에어비앤비, 카약(Kayak), 트립어드바이저(TripAdvisor)를 포함한 신속하고 대중적인 앱은 모두 스위프트로 만들어졌다.

13. 러스트
모질라(Mozilla)가 창안한 러스트 1.0(Rust 1.0)은 2014년에 출시되어 여러 해 동안 개발 중이다. C 및 C++와 관련하여 모질라는 이를 "성능, 병렬화, 메모리 안전에 중점을 둔 새로운 프로그래밍 언어"라고 설명한다.

"러스트의 제작자는 처음부터 언어를 구축하고 현대 프로그래밍 언어 디자인의 요소를 통합함으로써 전통적인 언어가 처리해야 하는 많은 기능(이전 버전과의 호환성 요구 사항)을 피한다"라고 모질라는 전했다. 

레드몽크의 오그래디는 최근 다음과 같이 지적했다. "언젠가는 언어가 개발자들의 관심을 다양한 공간에서 끌어 올리고 있다는 일화적 증거가 축적되고 있다."

깃허브의 프로그램 관리자인 조 내쉬는 모질라는 시스템 프로그래밍을 위한 좀더 안전한 언어를 만들기 위해 수백만 달러를 투자했다. 언어 자체는 엄청나게 발전했으며 개발자들은 이미 러스트 엔진을 사용하여 게임 엔진, 운영체제, 파일 시스템, 브라우저 구성 요소, 가상현실을 위한 시뮬레이션 엔진을 제공한다"라고 말했다.

14. 고
이 오픈소스 언어는 파생된 자바 및 C와 같은 확립된 언어보다 빠르고 사용하기 쉽다. 고(Go)는 BBC, 사운드클라우드(SoundCloud), 페이스북부터 영국 정부 수상 경력이 있는 GOV.UK 사이트까지 다양한 조직에서 사용한다. 또한 기업용 소프트웨어 신생업체들에서도 쓰인다. 

"고는 정적으로 타이핑되고 컴파일된 언어의 효율성 및 안전성과 해석, 동적 유형 언어의 프로그래밍 용이성을 결합하려는 시도"라고 창시자들은 전했다.

깃허브의 조 내쉬는 "고는 분산 웹 애플리케이션에서 매우 인기가 높아지고 있다. 이것은 현대 시스템 개발을 위한 훌륭한 언어이며 컨테이너 이동에 따라 많이 논의된다"라고 밝혔다.

15. 하스켈
하스켈(Haskell)은 '고급 순수 함수형 프로그래밍 언어'라고 부른다. 첫 번째 사양은 1990년에 발표되었다. 유형 유추 및 '게으른 평가'가 있는 유형 시스템이 특징이다. 주로 학계에서 사용되지만 AT&T, BAE시스템(BAE Systems), 페이스북, 심지어 구글의 프로젝트와 같이 업계에서 사용되는 몇 가지 예가 있다.

2016년 한 그룹이 2020년 버전의 언어를 컴파일하기 시작했다.

16. 클로저
2009년에 시작된 클로저(Clojure)는 립스(Lisp) 프로그래밍 언어다. 함수적 프로그래밍을 강조하는 범용 언어로 코드를 데이터로 취급하고 다른 '립스'와 같은 매크로 시스템을 가지고 있다. 월마트, 퍼펫 랩(Puppet Labs) 등 여러 대형 소프트웨어 회사와 같은 회사에서 업계에서 성공적으로 사용된다.  ciokr@idg.co.kr


원문보기: 
http://www.ciokorea.com/news/126494?page=0,1#csidx5236eb1b0277fcd89bcffb63a36e13d 






프로그래밍의 미래는? 9가지 예측
       Peter Wayner | InfoWorld

시간이 일정한 속도로 움직인다는 설명이 있다. 반면 모든 것이 빛의 속도에 가까운 속도로 변한다는 주장도 있다. 그렇지만 그사이 기술 세계 변화의 속도는 점점 더 빨라지고 있다.

만약 지금 다음 개발 프로젝트를 위해 어디에 투자해야 할 지 정해야 한다면 어떻게 해야 할까. 사실 5년 뒤를 내다보는 것은 어렵다. 기술의 미래를 예측하는 것은 매우 힘들고, 향후 혁신에 미칠 영향과 관련해 스킬(역량, 전문성)과 도구를 예측하는 것도 불가능에 가깝다. 그러나 기술 세계의 '수정 구슬'을 통해 넌지시 미래를 엿볼 수 있다. '프로그래밍의 미래'라는 수정 구슬 말이다.

그래서 현재 가장 흥미로운 발전상을 토대로 프로그래밍의 미래를 예상해봤다. 이 모두가 실현될 것이라고 장담할 수 없고, 또 모두가 새로운 무엇이라고 단언할 수도 없다. 그러나 우리 앞에 점점 더 빠르게 변하면서 펼쳐지는 미래를 계획하는 데 도움을 주는 로드맵이 되어줄 것이다.

예측 1: IoT를 지배할 REST
REST 프로토콜은 웹을 점령했다. 그리고 온도조절기, 문 손잡이, 주방 가전이 인터넷에 연결돼 '패킷'을 서로 교환하는 사물인터넷(IoT) 또한 지배할 것으로 보인다. '사물 SCSI, 사물 USB, 사물 SATA'라는 말은 없지 않은가? 그럴만한 확실한 이유가 있다. 프로그래머는 REST의 단순성을 사랑한다. REST는 그 기본 아키텍처 덕분에 이해하기 쉽고 비교적 간단하게 디버깅할 수 있다. 모든 데이터가 텍스트 형식으로 돼 있어 손쉽게 문제를 파악해 해결할 수 있는 것도 장점이다. 앞으로 80 포트 기반 Nginx로 부팅되는 신형 보안 카메라, 전자레인지, 회전식 코털깎이 장치 등이 등장할 것이다. HTML과 CSS를 이용해 이들 장치의 새로운 정보를 볼 수 있을 것이다.

예측 2: 다시 부상할 바이너리 프로토콜
REST 프로토콜을 이용해 JSON 패킷을 주고받는 방식은 최소한 기존의 XML 데이터와 90%의 태그 페이로드 방식보다 간편하다. 그러나 더 큰 효율성을 추구하는 프로그래머는 바이너리 데이터가 JSON으로 올바르게 표현될 수 있게 스트링으로 전환해야만 하는 이유를 궁금해한다. 이 경우 스트링을 분석, 다시 바이트로 바꿔야 하기 때문이다. 그냥 바이트를 직접 전송할 수 없을까? 특히 사물인터넷은 항상 몇 바이트의 데이터를 주고받는 환경이다.

이런 필요 때문에 앞으로 더 많은 바이너리 프로토콜이 구현될 것으로 보인다. HTTP 표준은 본질적으로 텍스트 기반이다. 상용 바이너리 프로토콜 때문에 좋지 않은 경험을 한 프로그래머가 많다. 이것 만으로 안되는 것은 물론 제 기능을 발휘한다는 보장도 없기 때문이다. JSON과 REST가 개방되면서 큰 도움이 됐지만 바이너리 프로토콜의 '오픈(개방)'화가 오픈 표준에 효율성을 가져올 수 있다는 의미는 아니다. IoT는 과거 어느 때보다 많은 데이터를 생성하고, 다양한 장치가 더 촘촘한 인코딩이 필요한 작은 패킷을 다수 사용할 전망이다. 프로그래머는 이런 성능이 필요할 때 기존 패킷의 바이너리 효율성을 높일 방법을 찾게 될 것이다.

예측 3: HTML을 '킬'할 비디오
과거에는 여러 웹사이트를 옮겨 다니는 이유가 텍스트 기반의 정보를 얻기 위해서였다. 텍스트 정보를 보고, 더 많은 정보가 필요할 때마다 하이퍼링크를 클릭했다. 그런데 시대가 바뀌었다. 이제 몇 시간 또는 며칠 동안 소파에 무기력하게 앉아 TV 시리즈의 에피소드가 끝날 때까지 비디오를 즐긴다. 물론 키보드가 필요할 때도 있다. 좋아하는 TV 시리즈의 다음 시즌이 언제 넷플릭스에 업로드 될지 알아보기 위해서다. 이렇게 인터넷이 TV로 흡수되고 있다. 비디오 스트림이 '사고'하는 스트림으로서 '텍스트의 쌍방향 미래'를 점령하고 있다.

사실 이것은 100% 진실은 아니다. 일부는 인터넷이 TV를 해방하고 있다고 주장한다. 사람들은 웹사이트에서 TV 토막 영상을 즐긴다. 필자는 'SNL(Saturday Night Live)' 방영 시간이 토요일 밤인지, 생방송인지 아니면 녹화방송인지 모른다. 하지만 웹사이트에서 짧은 토막 영상들을 시청할 수 있다는 것은 잘 안다. 프로그램을 시작하는 모두발언이나 게스트 초대 여부는 전혀 중요하지 않고 아무도 신경쓰지 않는다.

'카우치 포테이토'(오랫동안 TV만 보는 사람)라면 소파에 앉아 클릭 몇 번으로 동영상을 소비하는 것 외에 특별히 할 일이 없다. 차세대 비디오 앱이 새로운 계층을 추가하고, 기존의 툴을 크게 개선할 가능성도 있다. 플래시의 '사망'과 HTML5의 '지배'가 비디오 클립을 HTML에 통합하는 가능성의 문을 열어놨다. 프로그래머가 이런 기회를 이용할 수 있을지 모른다. 그 때까지, 사용자들은 할아버지 세대가 그랬던 것과 같은 방법으로 소파에 앉아 TV를 시청할 것이다. 거대 인터넷 기업과 3자릿수의 전국 방송사가 스트리밍 서비스를 제공해도 마찬가지이다.

예측 4: 전화 빼고 모든 것을 할 수 있는 스마트폰
지금 스마트폰을 전화를 주고 받는 용도로 사용하는 사람이 있을까? 우리는 스마트폰으로 주로 문자 메시지를 보내고, 이메일을 읽고, 웹사이트를 방문한다. 게다가 이런 현상이 이제 막 시작됐을 뿐이다. 작은 사각형 화면이 10년이 넘는 세월 동안 우리의 일상을 크게 바꿔 놓았다. 그리고 이런 변화가 더욱 흥미로워지기 시작했다. 더 많은 센서를 추가하고, 마이크로폰과 카메라, 가속도계를 현명하게 이용하는 방법을 발견하면서, 업무와 취미 모두에 큰 변화가 발생했다.

과거에는 병원에서 몇 시간을 기다려야 건강 검진이나 치료를 받을 수 있었다. 그러나 이제는 수백 개의 창업 기업이 스마트폰을 의료 기기로 바꿀 방법을 찾고 있다. 마이크로폰은 심장 박동을 기록한다. 카메라는 목 깊은 곳을 들여다보고, 가속도계가 운동량을 측정한다. 이 모두가 클라우드를 통해 의사에게 전달된다. 의사는 환자를 치료할 수 있는 전문의에게 정보를 넘겨준다.

차세대 스마트 장치는 현재의 장치를 아주 기초적인 장치로 보이게 만들 것이다. 예를 들어 내비게이션 앱과 일정 예약, 여행 계획 수립 앱이 통합되고 있다. 운전을 제외한 모든 것을 처리해준다. 운동량 추적 앱은 아침에 일어나 업무를 보고, 다시 잠이 들 때까지 모든 신체 리듬을 기록한다. 스마트폰도 전화라는 사실을 망각하고, 전화 기능과 전혀 관련 없는 앱을 개발하는 사람이 있을 지도 모른다.

예측 5: 더 크고 우수한 데이터베이스
검색 엔진은 웹을 색인했다. 그리고 이제 데이터베이스가 세상 그 자체를 색인하는 시대가 도래했다. 차세대 위치 인식 앱과 자율 자동차에 대한 요구가 커지고 있기 때문이다. 웨이즈(Waze) 같은 앱은 사용자의 모든 흐름을 추적한다. 그리고 개발자와 사용자에게 존재하는 세상 그대로의 지도를 제공한다. 지도 제작자가 항공 사진을 보고 제작한 천편일률적인 지도가 아니다. 도로가 차단됐는지, 소 한 마리가 길을 건너는 바람에 차량 정체가 발생했는지를 알 수 있다. 신축 도로 공사 계획을 미리 알 수 있다.

이런 데이터베이스의 세밀함이 놀라울 정도로 발전할 것이다. 예를 들어, 자율 주행 자동차는 가로등 기둥, 신문 자판기의 위치를 파악할 수 있게 된다. 아이가 공을 줍기 위해 도로로 뛰어들 경우 이에 대처할 수도 있다. 수 많은 가능성을 가진 데이터들이다. 이것은 자율 주행 자동차에만 국한되지 않는 가능성이다. 지방 정부는 도로 보수가 필요한 시점을 정확히 알 수 있다. 가로등이 나가면 그 즉시 교체할 수 있게 된다. 물론 경찰은 거리를 걷는 사람에 대해 더 많은 데이터를 확보하게 될 것이다.

가까운 장래에 전국의 도로에 난 구멍의 위치를 기록하는 데이터베이스가 등장할 수도 있다. 지방 정부가 도로의 구멍을 즉시 보수할까? 지금 세대에서는 지나친 요구일 수도 있다. 그러나 곧 로봇이 이를 처리하는 시대가 올 것이다.

예측 6: 사람이 개발할 필요가 없는 자바스크립트의 득세
자바스크립트가 득세할 전망이다. 그러나 사람이 개발할 필요가 없는 자바스크립트이다. 누가 개발을 할까? 코딩이다. 사람은 10여 개 언어로 코딩한다. 그러면 코드를 변환하는 로봇이 브라우저나 Node.js가 이해할 수 있게 바꾼다. '사물'이 컴파일해서 실행할 수 있는 기트허브(GitHub) 코드가 증가하고 있다.

CoffeeScript를 예로 들 수 있다. 일부 프로그래머가 질색하는 구두점을 대부분 없앤 언어다. Coco, IcedCoffeeScript, CoffeeScript II: The Wrath of Khan 등 CoffeeScript의 변종이 수십 가지다. 이는 시작에 불과하다. 재능 있는 프로그래머가 Cobol, Java, Lisp, C 등 다양한 언어를 위한 트랜스코더(Transcoders)를 개발했다. 해석과 최적화를 거쳐 모두 브라우저에서 실행시킬 수 있는 것들이다. 로봇 소프트웨어 컨시어지가 좋아하는 언어를 대신 해석해 줄 수 있는데 자바스크립트를 직접 쓸 필요가 있을까?

예측 7: 다시 Node.js와 경쟁할 PHP
몇 년 전만 해도 Node.js와 자바스크립트가 서버 팜을 지배하면서 PHP가 점차 사라질 것으로 보였고 지금도 계속되고 있다. 그러나 PHP가 맞서 싸우고 있다. PHP 7과 HipHop 가상 머신 같은 새로운 JIT(Just In Time) 도구가 훨씬 빨라진 성능을 제공하고 있다. 덕분에 워드프레스(WordPress)와 드루팔(Drupal) 같은 코드 베이스의 속도가 30~50%, 심지어 100%까지 향상됐다.

물론 이것이 자바스크립트가 프로젝트에 제공하는 장점을 대신하지는 못한다. 브라우저와 서버에서 같은 코드를 구현하는 것이 대표적이다. 그러나 Node.js 때문에 PHP에 기반을 둔 과거의 코드 베이스를 포기하게 한 가장 큰 이유 중 하나를 없애준다. 즉, 구식 플랫폼이 새 생명을 갖게 된 것이다.

예측 8: 누구나 할 수 있는 프로그래밍
누구나 소프트웨어를 개발할 수 있도록 하는 교육 프로젝트가 본격화됐다. 2014년 12월 8일, 오바마 대통령은 중동, 테러와의 전쟁 문제에서 잠시 손을 떼고, 프로그래밍 교육을 강조하는 데 시간을 투자했다. 미리 좀 그랬다면 오바마케어 웹사이트 문제도 덜 심각하지 않았을까.

어쨌든 누구나 프로그래밍을 할 수 있게 가르친다는 계획은 앞으로도 몇 년 간 계속 추진될 전망이다. 진짜 프로그래머가 이를 대하는 최상의 전략은 '미소를 지으면서 장려를 하는 것'이다. 프로그래밍을 시도하는 보통 사람들이 증가할 것이다. 그러나 그럴수록 숫자와 API 등과 씨름하는 것이 얼마나 힘든 일인지 깨닫는 사람도 늘어날 것이다. 코드를 쓰는 것과 수천 또는 수백만 코드로 구성된 온전한 시스템을 구현하는 것은 별개의 문제이다.

물론 능력을 발휘하는 사람도 있을 것이다. 그러나 대부분 사람이 머리를 쥐어뜯으며 비명을 내지를 게 분명하다. 누구나 루프 하나를 쓸 수는 있다. 그러나 올바른 루프를 선택할 수 있는 사람은 소수이다. 누구나 나무를 자를 줄 안다. 그러나 집을 지을 때는 목수를 부른다. 같은 원리이다.

예측 9: 프로그래머를 더 짜증나게 만들 상사
상사가 프로그래밍에 대해 귀동냥을 했다. 한 시간 과정의 프로그래밍 개발 교육을 마치고, 도움을 주기 원한다. "여기서 변수를 쓸 건가? 상수를 쓰는 게 맞나? 여기서 루프를 쓸 계획이지?" 등의 이야기를 듣게 될 것이다. 그러면 그냥 미소를 지으면서 고맙다고 말하라. 그게 할 수 있는 유일한 일일테니.  editor@itworld.co.kr


원문보기: 
http://www.ciokorea.com/column/28236?page=0,2#csidxdd76aaeb5a559aa827b184ef7e8a801 




개발자 경력에 '가산점' 될 6가지 새로운 언어
                                           Paul Rubens | CIO


개발자의 채용 기회를 높이는 좋은 전략 중 하나는 새로운 프로그래밍 언어를 학습하는 것이다. 문제는 어떤 언어를 배우느냐는 것이다.

개발자 채용 사이트를 들여다보면 수요가 많은 프로그래밍 언어를 파악할 수 있다. 그리고 지금 당장은 자바, C, C++, 오브젝티브(Objective) C 같은 프로그래밍 언어, 파이썬(Python), PHP, 루비(Ruby), 자바스크립트(JavaScript) 같은 스크립트 언어, SQL 데이터베이스 프로그래밍 능력을 갖추고 있는 프로그래머들이 인기다.

하지만 미래에 좋은 일자리를 차지하기 위해 한 발 앞서 나가고 싶다면 자바나 파이썬 같은 일반적인 언어 이상을 공략해야 한다.

지금 당장은 아니지만, 미래에 수요가 많을 새로운 언어와 관련된 능력과 경험을 축적하는 것은 어떨까? 이는 1990년대, 자바가 도입됐던 시기에 그 잠재력을 포착했던 프로그래머들에게 큰 도움을 줬던 커리어 전략이다. 자바를 일찍 학습했던 프로그래머들은 몇 년 뒤 자바 프로그래머에 대한 수요가 최고조에 달했을 때 쉽게 일자리를 구할 수 있었다.

그러나 많은 프로그래밍 언어 중 잠재력이 높은 언어 하나를 고르는 것이 문제다. 가트너의 조사 담당 이상인 마크 드라이버는 "새로운 언어의 대다수가 오픈소스 프로젝트에서 비롯되고 있다. 진입 장벽이 없어 수천 종의 새로운 언어가 쏟아져 나오고 있다는 의미다. 대다수는 재빨리 사라진다. 살아남아 인기를 얻는 언어는 극소수에 불과하다"고 지적했다.


드라이버에 따르면, 대다수 기업에서 자바, C++, C# 같은 기존 언어들이 다른 언어로 대체되기에는 그 입지가 튼튼하고, 자신들이 원하는 만큼 언어를 확장할 수 있는 기업은 극소수인 것이 원인이다.

그 가운데서도 새롭게 인기를 끄는 언어들이 분명 있다. 여기 유망한 6가지 언어를 소개한다. (순서는 의미가 없다.).


다트(Dart): 자바스크립트를 대체하는 언어
다트는 구글이 자바스크립트 대용으로 개발한 오픈소스 언어다.
커피스크립트(CoffeeScript) 같은 다른 자바스크립트 대용 언어와 마찬가지로, 자바스크립트 개발자들이 쉽게 배울 수 있는 언어이다. 여러 개발자가 참여하는 대규모의 웹 앱을 구축하기 쉽다는 장점을 갖고 있다. 반면 자바스크립트는 여기에 적합하지 않다.

현재는 크롬에 탑재된 다트 VM에서, 또는 자바스크립트 크로스 컴파일링을 통해 다른 브라우저에서 다트 애플리케이션을 실행시킬 수 있다.

다트를 배워야 하는 이유는? 구글이 지원하고 있어 성공할 확률이 높기 때문이다.


오파(Opa): 간단하고 안전한 웹 앱
오파는 쉽게, 더욱 안전한 웹 애플리케이션을 개발할 수 있는 언어다. 왜 그럴까? (자바스크립트, PHP, MySQL 등) 서로 다은 언어로 브라우저 측면, 서버 측면, 백엔드 측면의 데이터베이스 구성 요소를 구현해 이를 연동시키는 대신, 오파로만 전체 애플리케이션을 개발할 수 있기 때문이다. 이후 컴파일러가 클라이언트와 서버 코드를 창조하고, 이들 사이의 통신 인프라를 구축한다. 영리한 방법이다.

아직까지는 기업들이 오파를 대규모로 도입해 이용하는 사례는 없다. 그러나 드라이버에 따르면, 현재 인터넷에서 이 언어가 많이 이야기되고 있다.

오파를 배워야 하는 이유는? 웹 애플리케이션이 점차 복잡해지며, 증가하고 있는 추세이다. 서버 측면/클라이언트 측면에서 코드를 자동으로 배포할 수 있다는 독창적인 장점이 있다.


스칼라(Scala): 확장성이 뛰어난 언어
스칼라는 '확장 가능한 언어(Scalable language)'의 약자이며, 정확히 이를 위해 만들어진 언어이다. 아주 작은 프로그램 또는 아주 큰 애플리케이션 모두에 사용할 수 있다. 2003년 소개되었기 때문에 새로운 언어라고 말하기는 힘들다. 그러나 관심이 높아지고 있다. 관심이 높아지고 있는 이유 중 하나는 동시 실행(병행 실행)을 위해 코드를 최적화 할 수 있기 때문이다. 또 많은 개발자들이 이를 사용하기 선호하는 것도 이유다.

스칼라를 도입했을 때 기업이 얻을 수 있는 주요 이점 가운데 하나는 자바와의 상호운영성이다. 이클립스, 인텔리제이(IntelliJ) 또는 넷빈스(NetBeans) 같은 IDE(Integrated Development Environments)와 스프링(Spring)이나 하이버네이트(Hibernate) 같은 프레임워크는 물론, JVM(그리고 안드로이드)에 적용할 수 있다. 포레스터의 수석 애널리스트 제프리 하몬드는 "기존 JVM 위에 구현을 할 수 있다는 점이 큰 의미를 갖는다"고 말했다.

스칼라를 배워야 하는 이유는? 이미 자바에 투자했으며, 자신들의 생산 환경에서 새로운 무언가를 지원하는 것을 꺼리는 기업들이 매력을 느낄 수 있기 때문이다.


얼랑(Erlang): 동시 실행(병행 실행)
얼랑은 동시 실행(Concurrency) 덕분에 탄성을 얻은 또 다른 언어이다. 1986년 처음 개발됐고, 1998년 오픈소스로 공개됐다. 규모가 크고 유효성이 높은 애플리케이션 구축에 적합한 언어다. 얼랑의 런타임 시스템은 핫 스와핑(Hot Swapping)을 지원하기 때문에, 실행되고 있는 시스템을 중지시키지 않고도 코드를 수정 또는 업데이트 할 수 있다.

또 동시 실행 프로그래밍을 효율적으로 만들 수 있는 프로세스를 생성 및 관리하기 위한 언어 수준의 기능이 제공된다. 한편 프로세스는 메시지 전달(Message passing) 없이 커뮤니케이션 한다. 잠금 기능이 필요 없는 것이다.

얼랑을 배워야 하는 이유는? 가트너의 드라이버와 포레스터의 하몬드 모두 얼랑이 앞으로 인기를 끌 것이라고 전망했다.


실론(Ceylon): 모듈식 자바 킬러
자바에 기반을 둔 실론은 자바 킬러의 일종으로 개발됐다. 레드햇 산하 팀이 큰 프로그램 개발을 위한 언어로 개발했다. 안정적인 버전이 처음 공개된 시기는 2013년 말이다.

모듈성을 중요한 특징으로 갖고 있는 언어다. 코드를 패키지와 모듈로 정리해, 모듈 아카이브로 컴파일링 할 수 있다. 툴링은 모듈 저장소 시스템을 지원한다. 실론 허드(Ceylon Herd)라는 중앙 저장소에서 모듈 일체를 발행할 수 있다.

실론은 자바 프로그래밍에 기반을 두고 있고, 이클립스 기반 IDE와 명령줄 툴(모듈성 지원)이 탑재되어 있다. 따라서 자바 프로그래밍에 익숙하다면 어렵지 않게 학습을 할 수 있다.

실론을 배워야 하는 이유는? 실론 프로그램은 자바 및 자바스크립트 가상 머신(클라이언트 및 서버 시스템)에 컴파일링 및 실행된다. 오파와 유사하다. 또 자연어 코드와 쉽게 상호운영된다.


고우(Go): 클라우드를 위한 언어
고우는 구글이 2009년 처음 공개한 오픈소스 언어다. 고우랑(Golang)이라고도 하는 고우는 C와 같은 전통적인 언어다. 그러나 클라우드용 언어로 동시 실행과 가비지 콜렉션(Garbage collection)을 지원한다. 크기가 큰 고우 애플리케이션이라도 컴퓨터 한 대로 몇 초 만에 컴파일링을 할 수 있다.

고우를 이용한 대표적인 프로젝트로는 도커(Docker) 및 포스닷컴(Force.com)을 예로 들 수 있다. 드라이버는 "현재 고우에 대한 이야기가 많다. 많은 테스트가 진행되고 있다. 그러나 학습 곡선이 가파를 것이다."고 말했다.

고우를 배워야 하는 이유는? 클라우드에 적합하고, 구글이 지원하고 있고, 현재 고우에 대한 관심 수준이 높다는 점을 감안하면, 이 언어의 수요 또한 증가할 것이기 때문이다.

*Paul Rubens는 영국에 거주하는 테크놀로지 저널리스트다. ciokr@idg.co.kr


원문보기: 
http://www.ciokorea.com/news/21219?page=0,0#csidx4c21495c0a3000caa57b8f5524c84f3 




구식 데이터베이스에서 가능한 10 가지 트릭
Martin Heller | InfoWorld


이미 보유한 구식 오라클, SQL 서버, MySQL, 포스트그레SQL 데이터베이스에 숨겨진 ‘NoSQL’ 기능이 꽤나 강력할 수 있다. 어쩌면 꽤 놀랄지도 모른다. 

NoSQL 데이터베이스, 분산 데이터베이스, 데이터 웨어하우스 및 GPU 가속화 데이터베이스에 대해 열광하고 있는가? 그러나 어쩌면 기존의 관계형 데이터베이스가 여전히 핵심적인 정보를 저장하고 제공한다는 사실을 간과할 수 있겠다. 

오라클 데이터베이스, 마이크로소프트 SQL 서버, MySQL/마리아DB 및 포스트그레(Postgre)SQL은 그 시작이 1980년대까지 거슬러 올라가지만, 모두 여전히 활발하게 개발되고 있다. 단지 버그를 고치고 성능을 조정하는데 그치지 않는다.

이 기사에서는 기존의 SQL 데이터베이스가 개선되고 있는 여러 방식에 대해 살펴본다. 일부는 데이터를 사용하기 위한 색인 및 검색 기능과 함께 여러 종류의 데이터를 지원하는 것과 관련이 있다. 또 다른 것은 자주 사용하는 테이블들에 대한 엑세스 속도를 높이는 것에 초점을 맞춘다. 데이터베이스를 자신의 테이블, 단일 서버 및 SQL 쿼리를 넘어서 확장하는 것과 관련된 것들도 있다. 

전문(full-text) 검색
표준적인 관계형 데이터베이스 인덱스는 성능상의 이유로 간략한 필드나 심지어 해시를 사용하는 경향이 있다. 전문 검색은 다르다. 전문 검색은 일반적으로 단어, 기록 및 오프셋 위치의 뒤집어진 목록과 같이 다른 종류의 인덱스로 다뤄진다. 종종 무시되는 제외어의 목록과 각 단어의 다른 형태를 생성하기 위한 추출 알고리즘이 있다. 일부 전문 검색 엔진은 불리안(Boolean) 작업, 퍼지 검색 또는 인접 검색을 지원한다.

오라클 데이터베이스, SQL 서버, MySQL/마리아DB 및 포스트그레SQL은 (MySQL 용어를 사용하자면) 모두 FULLTEXT 인덱스가 있는 CHAR, VARCHAR 또는 TEXT 열과 같이 특별히 지정된 텍스트 필드에 대한 전문 검색을 제공한다. 또한 엘라스틱서치(Elasticsearch)나 솔라(Solr)와 같은 외부 전문 검색 엔진을 사용하여 데이터베이스에서 텍스트를 색인화하고 검색할 수 있다. 

제이슨(JSON) 데이터
제이슨(JavaScript Object Notation, JSON)은 웹용 자바스크립트가 각광을 받으면서 유명해졌으며, NoSQL 문서 데이터베이스의 표준 데이터 포맷 중 하나가 되었다. 그러자 뒤쳐지지 않기 위해서 많은 SQL 데이터베이스들은 제이슨에 대한 지원을 추가했으며, 반구조화 되어 있고 때로는 계층적인 제이슨 문서를 검색하는 데 필요한 부가적인 구문도 추가했다. 물론 각 데이터베이스들은 해당하는 제이슨 지원도 추가했다.  

예를 들어 SQL 서버에서는 텍스트 필드에서 제이슨 값을 명시적으로(explicitly) 조회할 수 있으며, 제이슨 문서를 테이블로 변환할 수도 있다. 텍스트 필드에 제약 조건을 추가하여 텍스트 필드가 유효한 제이슨으로 포맷되도록 할 수도 있다. 반면에, 포스트그레SQL은 제이슨 기능과 오퍼레이터뿐만 아니라 명시적인 제이슨 유형도 가지고 있다.

XML 데이터
제이슨과 마찬가지로 XML은 반구조화 된 데이터 유형이다. 지금은 많은 애플리케이션에서 제이슨으로 대체되어가고는 있지만, 웹 서비스와 AJAX 웹 콜백이 개발된 시대에는 널리 활용되었던 데이터 교환 형식이었다. XML 스키마는 XML 문서에 어떤 구조를 부여할 수 있으며, XPath는 XML 문서에서 탐색을 위한 경로식을 사용한다. 그리고 XSLT 변환 언어는 나름의 용도가 있는데, 예를 들자면 XML 데이터에서 웹 페이지를 생성한다.

앞서 언급한 모든 관계형 데이터베이스들은 어느 정도 XML 데이터를 지원한다. 아직 개발되지 않은 애플리케이션의 경우 제이슨보다 XML을 선택하는 경우가 많을 수도 있겠지만, XML 문서를 중심으로 구축된 기존 애플리케이션의 경우에는 XML을 관계 테이블에 저장할 수 있는 기능이 유용할 수 있다.

지리공간(Geospatial) 데이터
기하학 및 지리적 정보가 숫자 유형에 적합할 것처럼 보일 지도 모르지만, 공간 데이터에 대해 자주 실행되는 쿼리의 종류는 2차원 데이터를 인식하는 인덱스를 필요로 한다. 이것은 표준 B-트리 기능을 벗어난다. 

예를 들어, 두 공항 사이의 거리, LA 공항에서 가장 가까운 이웃 공항, 시카고에서 비즈니스 미팅 장소와 가장 가까운 호텔, 또는 맨해튼의 경계 안에 택시가 있는지 등등을 알고 싶은 경우가 있을 수 있다. 이러한 쿼리를 처리하기 위해서 R-트리, SP-GiST, 쿼드트리 또는 UB-트리 인덱스가 필요할 수도 있다. 

포스트그레SQL을 위한 포스트GIS와 같이 일부는 추가 기능을 필요로 하지만, 앞서 언급한 모든 관계형 데이터베이스는 공간 정보 및 인덱스를 지원한다. 구현 상세 내역은 종종 다르지만, 일반적으로 개방형 공간 컨소시엄 단순 기능(Open Geospace Consortium Simple Features) 사양 및 SQL/MM 공간 ISO/IEC 표준을 준수한다.

인메모리(In-memory) 테이블
인메모리 캐싱은 지원하지만 순수한 인메모리 테이블은 아닌 PostgreSQL를 제외하면, 앞서 언급한 모든 관계형 데이터베이스는 메모리에 테이블을 만들 수 있다. 인메모리 테이블은 주로 읽기가 매우 많은 시나리오에서 해당 테이블의 정보 작업 속도를 크게 향상시킨다. 때때로 언급되는 속도 개선치는 30배지만, 그것은 데이터베이스에 사용될 수 있는 다양한 종류의 디스크를 고려하지 않는 근사치에 불과하다. 

종종 인메모리 테이블에 적용되는 한도가 있다. 가장 중요한 것은 그 테이블을 고정하기에 충분한 램의 요구사항이다. 이 요구사항은 대신 캐싱과 조인스를 위해 사용될 수 있었던 것들이다. 그 다음으로는 특정 데이터베이스와 엔진에 대한 제한이 있다. 

MySQL MEMORY 스토리지 엔진은 일시적이고 내구성이 없으며(MySQL 서버가 중단되거나 중지될 때 사라짐), 트랜잭션·외래키·지리적 유형· 전문 검색 색인화 등이 부족하고, 쓰기가 많은 경우 제대로 작동하지 않으며, 테이블 수준에서 잠김이 발생하고, 파티션이 불가능하다. MySQL NDB 클러스터 엔진은 이러한 제약 조건 중 일부를 제거하지만, MySQL 데몬의 특수 버전을 실행해야 하며 클러스터에서 여러 종류의 노드가 활성화되어야 한다. 

SQL 서버 인메모리 OLTP는 메모리에 최적화된 테이블을 사용하는데, 내구성이 뛰어나고 트랜잭션을 지원한다. 또한, 종종 임시 테이블 대신 일시적인 데이터에 사용되는 내구성이 없는 테이블도 사용한다. 게다가 기본적으로 컴파일 된 T-SQL 모듈을 사용하여 작업을 처리하는 데 필요한 CPU 사이클을 줄임으로써 개별 트랜잭션에 소요되는 시간을 더욱 단축한다. SQL 서버 인메모리 OLTP 테이블은 쿼리 및 트랜잭션에서 디스크 기반 테이블과 결합될 수 있다. 

오라클 데이터베이스 인메모리는 실시간 애널리틱스(OLAP) 및 혼합 워크로드(HTAP)의 성능을 크게 향상시킨다. 인메모리 컬럼 스토어(IM 컬럼 스토어)는 오라클 데이터베이스 인메모리의 핵심 기능이다.

외부 데이터 소스
SQL 서버의 최근 버전들은 데이터베이스 자체 테이블의 외부에 있는 데이터 소스를 쿼리하는 메커니즘을 가지고 있다. 하둡, 블롭(Blob) 스토리지, 다른 관계형 데이터베이스 또는 샤드 맵 관리자에서 EXTERNAL DATA SOURCE를 생성할 수 있다. 그런 다음 데이터 로드 및 쿼리용 외부 데이터 소스에 대해 폴리베이스 또는 엘라스틱 데이터베이스 쿼리(애저 SQL 데이터베이스 v12+)를 사용할 수 있다.

포스트그레SQL 외래 데이터 래퍼로 포스트그레SQL 쿼리는 폭넓은 원격 데이터 소스에 대해 실행이 가능하다. 그 범위가 다른 SQL 데이터베이스, NoSQL 데이터베이스 및 빅 데이터 플랫폼에서 플랫 파일에 이르기까지 매우 넓다. 외래 데이터 래퍼는 SQL/MED(SQL Management of External Data) 표준을 따른다. 

빅 데이터 클러스터
마이크로소프트 SQL 서버 빅데이터 클러스터는 SQL 서버 2019 미리 보기를 시작으로 쿠버네티스에서 실행 중인 SQL서버, 스파크 및 HDFS 컨테이너의 확장 가능한 클러스터를 배치할 수 있도록 해준다. 이러한 구성요소는 Transact-SQL(PolyBase를 통해)나 스파크에서 빅데이터를 나란히 읽고, 쓰고, 처리하여, 고부가가치 관계 데이터를 대용량 빅데이터와 결합하고 분석할 수 있게 한다. 

오라클은 오라클 빅데이터 클라우드 서비스와 오라클 빅데이터 어플라이언스 온 프레미스에서 비슷한 기능을 제공한다.

복제본 읽기
MySQL, 마리아DB 및 포스트그레SQL은 모두 복제본 읽기 기능을 제공한다. 복제본 읽기는 직접적으로 읽기 처리율을 증가시키지만, 읽기/쓰기 서버의 읽기 로드를 줄임으로써 간접적으로 쓰기 성능도 높일 수 있다.

MySQL/마리아DB는 로그 파일 및 GTID 기반, 비동기식, 인메모리 NDB 클러스터를 사용하는 동기식, 반동기식 및 지연식, 문장 기반, 행 기반 및 혼합 기반 등의 다양한 종류의 복제본을 지원한다. 포스트그레SQL에는 다양한 복제 솔루션이 있다. 

아마존 오로라는 MySQL 및 포스그레SQL용 복제본 읽기 계획을 자체적으로 구현하고 있다. 오로라에서는 15개까지의 복제본이 가능하며, 동기화 지연시간은 20밀리초 미만이다.  

SQL 서버는 액티브-액티브 클러스터에서 보조 복제본 읽기를 지원한다. 오라클 데이터베이스는 읽기 전용 테이블 스냅샷을 사용하는 기본적인 한 방향 읽기 전용 복제 환경을 지원하고, 오라클 엔터프라이즈는 복제된 데이터베이스 시스템 전체에서 애플리케이션이 테이블 복제본을 업데이트할 수 있도록 하여 기본적인 읽기 전용 복제 기능을 확장시킨 고급 복제 기능을 지원한다.

샤딩(Sharding)
샤딩은 서버 간에 데이터를 나누는 방법이다. 수직 샤딩은 예를 들어 한 서버에는 인벤토리를 배치하고 다른 서버에는 주문을 넣고, 그리고 세 번째 서버에는 분석을 위해 집계된 테이블을 두는 등의 서로 다른 테이블의 분산과 관련이 있다. 

그것은 당신이 여러 서버의 테이블에 가입해야 할 때에만 문제가 된다. 수평 샤딩은 알파벳순으로 분할된 컨벤션의 등록 스테이션처럼 서버 간에 개별 테이블을 나누는 것과 관련된다. 수동 수평 샤딩은 골칫거리지만, 다행히도 자동 수평 샤딩을 위한 몇 가지 선택사항이 있다. 

시투스(Citus)는 프로트그레SQL의 자동 수평 샤딩을 한다. 시투스는 또한 데이터를 보관하는 작업자 노드에 대한 프런트엔드로써 코디네이터 노드도 제공한다.

마이크로소프트 에저 SQL 데이터베이스 v12는 자동 수평 샤딩을 위한 탄력적인 데이터베이스 샤드 맵을 지원한다. 또한, 수직 샤딩를 위한 데이터베이스 간 쿼리도 지원한다.

몇 가지 방법을 통해 아마존 RDS를 이용하여 MySQL 및 지원되는 다른 데이터베이스를 샤딩할 수 있다. 일반적으로 복제본 읽기를 사용하여 복제본을 만든 다음 복제본을 새 샤드로 삼을 수 있다. 오로라에는 이러한 용도의 clone database 명령이 있다. 복제 후 파티션 키 매핑 테이블에 따라 해당 샤드에 사용되지 않는 복제된 데이터는 삭제가 가능하다. 

SQL을 벗어난 보관 절차
역사적으로 모든 관계형 데이터베이스는 SQL 서버용 Transact-SQL 및 오라클용 PL/SQL과 같은 보관 절차를 위한 고유한 SQL 확장을 가지고 있었다. 최근 몇 년간 관계형 데이터베이스는 프로그래밍 언어 및 머신러닝 능력과 통합되어 왔다. 이것의 초기 예로는 오라클 데이터베이스에서 PL/SQL의 부속물로 실행되는 자바(Java)가 있다. 그 이후로 C, C++, C#, 펄(Perl), PHP, 파이썬(Python), R 언어 데이터베이스 확장이 등장했다. 

2009년 무렵 NoSQL 데이터베이스의 도입으로 SQL 호환성과 강한 일관성을 포기하는 대신 웹 애플리케이션을 위한 확장성이 높고 가용성이 좋은 데이터베이스의 필요성이 반영됐다. 지난 몇 년 동안 ‘고전적인’ SQL 데이터베이스는 일관성이나 호환성을 희생하지 않고서도 확장성과 가용성을 개선하기 위한 많은 옵션을 추가해왔다. 

해당 ‘NoSQL’ 작업을 위해 구식 SQL 데이터베이스를 무시하기 전에 문서를 확인하도록 하자. 양쪽 모두에서 최상의 결과를 얻을 지도 모른다. 

* Martin Heller는 인포월드 객원 편집자이자 리뷰어다. ciokr@idg.co.kr


원문보기: 
http://www.ciokorea.com/news/124590#csidx55f9979a656ce66a469b47b873d857e 